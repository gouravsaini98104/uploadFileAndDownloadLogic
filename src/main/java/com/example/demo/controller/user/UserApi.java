/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.40).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.demo.controller.user;


import com.example.demo.models.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-02-15T07:26:22.438049028Z[GMT]")
@Validated
public interface UserApi {

    @Operation(summary = "Finds user by id", description = "", tags = {"user"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),

            @ApiResponse(responseCode = "404", description = "User not found")})
    @RequestMapping(value = "/user/{userId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<User> findUserById(@Parameter(in = ParameterIn.PATH, description = "ID of user", required = true, schema = @Schema()) @PathVariable("userId") Long userId);


    @Operation(summary = "update user by id", description = "", tags = {"user"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successful operation"),

            @ApiResponse(responseCode = "404", description = "User not found")})
    @RequestMapping(value = "/user/{userId}",
            method = RequestMethod.PUT)
    ResponseEntity<Void> userUserIdPut(@Parameter(in = ParameterIn.PATH, description = "ID of pet to return", required = true, schema = @Schema()) @PathVariable("userId") Long userId);

}

